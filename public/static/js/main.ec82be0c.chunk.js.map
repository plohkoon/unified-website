{"version":3,"sources":["pieces/Images/pawn_black.svg","pieces/Images/pawn_white.svg","pieces/Images/bishop_black.svg","pieces/Images/bishop_white.svg","pieces/Images/castle_black.svg","pieces/Images/castle_white.svg","pieces/Images/king_black.svg","pieces/Images/king_white.svg","pieces/Images/knight_black.svg","pieces/Images/knight_white.svg","pieces/Images/queen_black.svg","pieces/Images/queen_white.svg","pieces/Pawn.js","pieces/Bishop.js","pieces/Castle.js","pieces/King.js","pieces/Knight.js","pieces/Queen.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Pawn","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this$props$coords","slicedToArray","coords","row","col","moves","board","getBoard","team","push","x","y","firstTurn","console","log","e","dataTransfer","setData","validMoves","highlightSpaces","_this","react_default","a","createElement","src","white","alt","draggable","curTurn","onDragStart","onDrag","className","onClick","setClickTransfer","black","Component","Bishop","Castle","King","castleable","name","bool","i","castle","Knight","Queen","App","state","piece","setState","clickTransfer","spaces","moving","isMoveArray","forEach","element","isMove","turn","winner","initcoords","_e$dataTransfer$getDa","_e$dataTransfer$getDa2","_this$state$clickTran","_this$state$clickTran2","move","initx","inity","getData","nextTurn","Pawn_Pawn","King_King","Queen_Queen","Castle_Castle","Knight_Knight","Bishop_Bishop","_this2","map","rowArr","rowNum","key","colNum","onDragOver","preventDefault","onDrop","movePiece","getPiece","getWinElement","renderBoard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ec82be0c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pawn_black.1c52d8c4.svg\";","module.exports = __webpack_public_path__ + \"static/media/pawn_white.d69014fb.svg\";","module.exports = __webpack_public_path__ + \"static/media/bishop_black.1f3b8d1a.svg\";","module.exports = __webpack_public_path__ + \"static/media/bishop_white.09004fd2.svg\";","module.exports = __webpack_public_path__ + \"static/media/castle_black.96872a66.svg\";","module.exports = __webpack_public_path__ + \"static/media/castle_white.095b1a06.svg\";","module.exports = __webpack_public_path__ + \"static/media/king_black.66e1bcad.svg\";","module.exports = __webpack_public_path__ + \"static/media/king_white.250510ff.svg\";","module.exports = __webpack_public_path__ + \"static/media/knight_black.d39f1d02.svg\";","module.exports = __webpack_public_path__ + \"static/media/knight_white.e6294efe.svg\";","module.exports = __webpack_public_path__ + \"static/media/queen_black.7b3e33e4.svg\";","module.exports = __webpack_public_path__ + \"static/media/queen_white.4320a2dd.svg\";","import React, { Component } from 'react';\r\n//gets image for pieces\r\nimport black from './Images/pawn_black.svg';\r\nimport white from './Images/pawn_white.svg';\r\n\r\nimport \"./piece.css\";\r\n\r\nexport default class Pawn extends Component {\r\n//constructor for consistency\r\n//eslint-disable-next-line\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n  //toString if necessary\r\n  toString(){\r\n    return \"pawn\"\r\n  }\r\n  //gets list of valid moves\r\n  validMoves() {\r\n    let [row, col] = this.props.coords,\r\n        moves = [],\r\n        board = this.props.getBoard();\r\n    //breaks it into case by team as move set is team dependant\r\n    if(this.props.team === \"white\") {\r\n      //standard move\r\n      if(row + 1 < 8 && !board[row + 1][col]) {\r\n        moves.push({x: row + 1, y: col});\r\n      }\r\n      //moves if capture available\r\n      if(row + 1 < 8 && col + 1 < 8 && board[row + 1][col + 1] && board[row + 1][col + 1].team !== this.props.team) {\r\n        moves.push({x: row + 1, y: col + 1});\r\n      }\r\n      if(row + 1 < 8 && col - 1 > -1 && board[row + 1][col - 1] && board[row + 1][col - 1].team !== this.props.team) {\r\n        moves.push({x: row + 1, y: col - 1});\r\n      }\r\n      //special logic for firstTurn\r\n      if(this.props.firstTurn && row + 2 < 8 && !board[row + 2][col]) {\r\n        moves.push({x: row + 2, y: col});\r\n      }\r\n    }\r\n    else {\r\n      //standard moves\r\n      if(row - 1 > -1&& !board[row - 1][col]) {\r\n        moves.push({x: row - 1, y: col});\r\n      }\r\n      //moves if capture available\r\n      if(row - 1 > -1 && col + 1 < 8 && board[row - 1][col + 1] && board[row - 1][col + 1].team !== this.props.team) {\r\n        moves.push({x: row - 1, y: col + 1});\r\n      }\r\n      if(row - 1 > -1 && col - 1 > -1 && board[row - 1][col - 1] && board[row - 1][col - 1].team !== this.props.team) {\r\n        moves.push({x: row - 1, y: col - 1});\r\n      }\r\n      //special logic for firstTurn\r\n      if(this.props.firstTurn && row - 2 < 8 && !board[row - 2][col]) {\r\n        moves.push({x: row - 2, y: col});\r\n      }\r\n    }\r\n\r\n    console.log(moves);\r\n    return moves;\r\n  }\r\n  //sets necessary data into dataTransfer\r\n  onDrag(e) {\r\n    e.dataTransfer.setData(\"piece\", this)\r\n    e.dataTransfer.setData(\"initcoords\", this.props.coords)\r\n    let moves = this.validMoves()\r\n    this.props.highlightSpaces(moves);\r\n  }\r\n  render() {\r\n    if(this.props.team === \"white\") {\r\n      return (\r\n        <img\r\n          src={white}\r\n          alt=\"white pawn\"\r\n          draggable={this.props.team === this.props.curTurn}\r\n          onDragStart={(e)=>{\r\n            this.onDrag(e)\r\n          }}\r\n          className=\"piece\"\r\n          onClick={e => {\r\n            this.props.setClickTransfer(this.props.coords, this)\r\n            this.props.highlightSpaces(this.validMoves())\r\n          }}\r\n        />\r\n      )\r\n    }\r\n    else {\r\n      return (\r\n        <img src={black}\r\n          alt=\"black pawn\"\r\n          draggable={this.props.team === this.props.curTurn}\r\n          onDragStart={(e)=>{\r\n            this.onDrag(e)\r\n          }}\r\n          className=\"piece\"\r\n          onClick={e => {\r\n            this.props.setClickTransfer(this.props.coords, this)\r\n            this.props.highlightSpaces(this.validMoves())\r\n          }}\r\n        />\r\n      )\r\n    }\r\n  }\r\n\r\n}\r\n","import React, { Component } from 'react';\r\n//grabbing the 2 SVG's\r\nimport black from './Images/bishop_black.svg';\r\nimport white from './Images/bishop_white.svg';\r\n\r\nexport default class Bishop extends Component {\r\n  //Keeping instructor for consistency\r\n  //eslint-disable-next-line\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n  //if a toString is ever needed\r\n  toString() {\r\n    return \"bishop\";\r\n  }\r\n  //hunts through the board for valid moves\r\n  validMoves() {\r\n    //getting the values that are needed for calculations\r\n    let [row, col] = this.props.coords,\r\n        moves = [],\r\n        board = this.props.getBoard(),\r\n        team = this.props.team;\r\n    //runs down to the right to find moves\r\n    for(let x = row + 1, y = col + 1; x < 8 && y < 8; x++, y++) {\r\n      //if space is empty or enemy then adds to array\r\n      if(board[x][y] === null || board[x][y].team !== team) {\r\n        moves.push({x: x, y: y});\r\n        //if it reaches an enemy then it breaks the loop and continues\r\n        if(board[x][y] !== null) {\r\n          break;\r\n        }\r\n      }\r\n      //\r\n      else {\r\n        break;\r\n      }\r\n    }\r\n    //runs down to the left with same logic\r\n    for(let x = row + 1, y = col - 1; x < 8 && y > -1; x++, y--) {\r\n      if(board[x][y] === null || board[x][y].team !== team) {\r\n        moves.push({x: x, y: y});\r\n        if(board[x][y] !== null) {\r\n          break;\r\n        }\r\n      }\r\n      else {\r\n        break;\r\n      }\r\n    }\r\n    //runs up to the left with same logic\r\n    for(let x = row - 1, y = col - 1; x > -1 && y > -1; x--, y--) {\r\n      if(board[x][y] === null || board[x][y].team !== team) {\r\n        moves.push({x: x, y: y});\r\n        if(board[x][y] !== null) {\r\n          break;\r\n        }\r\n      }\r\n      else {\r\n        break;\r\n      }\r\n    }\r\n    //runs up to the right with same logice\r\n    for(let x = row - 1, y = col + 1; x > -1 && y < 8; x--, y++) {\r\n      if(board[x][y] === null || board[x][y].team !== team) {\r\n        moves.push({x: x, y: y});\r\n        if(board[x][y] !== null) {\r\n          break;\r\n        }\r\n      }\r\n      else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    console.log(moves);\r\n    return moves;\r\n  }\r\n  //puts needed data into the transfer event\r\n  onDrag(e) {\r\n    e.dataTransfer.setData(\"piece\", this)\r\n    e.dataTransfer.setData(\"initcoords\", this.props.coords)\r\n    let moves = this.validMoves()\r\n    this.props.highlightSpaces(moves);\r\n  }\r\n  render() {\r\n    if(this.props.team === \"white\") {\r\n      return (\r\n        <img\r\n          src={white}\r\n          alt=\"white bishop\"\r\n          draggable={this.props.team === this.props.curTurn}\r\n          onDragStart={(e)=>{\r\n            this.onDrag(e)\r\n          }}\r\n          className=\"piece\"\r\n          onClick={e => {\r\n            this.props.setClickTransfer(this.props.coords, this)\r\n            this.props.highlightSpaces(this.validMoves())\r\n          }}\r\n        />)\r\n    }\r\n    else {\r\n      return (\r\n        <img\r\n          src={black}\r\n          alt=\"black bishop\"\r\n          draggable={this.props.team === this.props.curTurn}\r\n          onDragStart={(e)=>{this.onDrag(e)}}\r\n          className=\"piece\"\r\n          onClick={e => {\r\n            this.props.setClickTransfer(this.props.coords, this)\r\n            this.props.highlightSpaces(this.validMoves())\r\n          }}\r\n        />\r\n      )\r\n    }\r\n  }\r\n\r\n}\r\n","import React, { Component } from 'react';\r\n//get piece images\r\nimport black from './Images/castle_black.svg';\r\nimport white from './Images/castle_white.svg';\r\n\r\nexport default class Castle extends Component {\r\n  //constructor for consistency\r\n  //eslint-disable-next-line\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n  //toString if needed\r\n  toString() {\r\n    return \"castle\";\r\n  }\r\n  //gets an array of valid moves\r\n  validMoves(){\r\n    //gets neede values\r\n    let [row, col] = this.props.coords,\r\n        moves = [],\r\n        board = this.props.getBoard();\r\n        //checking down the board\r\n    for(let x = row + 1; x < 8; x++) {\r\n      //if spot is empty or an enemy\r\n      if(board[x][col] === null || board[x][col].team !== this.props.team) {\r\n        //adds move to array\r\n        moves.push({x: x, y: col});\r\n        if(board[x][col] !== null) {\r\n          break;\r\n        }\r\n      }\r\n      //if spot is ally breaks\r\n      else {\r\n        break;\r\n      }\r\n    }\r\n    //moving down board with same logic\r\n    for(let x = row - 1; x > -1; x--) {\r\n      if(board[x][col] === null || board[x][col].team !== this.props.team) {\r\n        moves.push({x: x, y: col});\r\n        if(board[x][col] !== null) {\r\n          break;\r\n        }\r\n      }\r\n      else {\r\n        break;\r\n      }\r\n    }\r\n    //moving right on board with same logic\r\n    for(let y = col + 1; y < 8; y++) {\r\n      if(board[row][y] === null || board[row][y].team !== this.props.team) {\r\n        moves.push({x: row, y: y});\r\n        if(board[row][y] !== null) {\r\n          break;\r\n        }\r\n      }\r\n      else {\r\n        break;\r\n      }\r\n    }\r\n    //moves left on board with same logic\r\n    for(let y = col - 1; y > -1; y--) {\r\n      if(board[row][y] === null || board[row][y].team !== this.props.team) {\r\n        moves.push({x: row, y: y});\r\n        if(board[row][y] !== null) {\r\n          break;\r\n        }\r\n      }\r\n      else {\r\n        break;\r\n      }\r\n    }\r\n    console.log(moves);\r\n    return moves;\r\n  }\r\n  //puts necessary data thats need for move\r\n  onDrag(e) {\r\n    e.dataTransfer.setData(\"piece\", this)\r\n    e.dataTransfer.setData(\"initcoords\", this.props.coords)\r\n    let moves = this.validMoves()\r\n    this.props.highlightSpaces(moves);\r\n  }\r\n  render() {\r\n    if(this.props.team === \"white\") {\r\n      return (\r\n        <img\r\n          src={white}\r\n          alt=\"white castle\"\r\n          draggable={this.props.team === this.props.curTurn}\r\n          onDragStart={(e)=>{\r\n            this.onDrag(e)\r\n          }}\r\n          className=\"piece\"\r\n          onClick={e => {\r\n            this.props.setClickTransfer(this.props.coords, this)\r\n            this.props.highlightSpaces(this.validMoves())\r\n          }}\r\n        />\r\n      )\r\n    }\r\n    else {\r\n      return (\r\n        <img\r\n          src={black}\r\n          alt=\"black castle\"\r\n          draggable={this.props.team === this.props.curTurn}\r\n          onDragStart={(e)=>{\r\n            this.onDrag(e)\r\n          }}\r\n          className=\"piece\"\r\n          onClick={e => {\r\n            this.props.setClickTransfer(this.props.coords, this)\r\n            this.props.highlightSpaces(this.validMoves())\r\n          }}\r\n        />\r\n      )\r\n    }\r\n  }\r\n\r\n}\r\n","import React, { Component } from 'react';\r\n//gets image files\r\nimport black from './Images/king_black.svg';\r\nimport white from './Images/king_white.svg';\r\n\r\nexport default class King extends Component {\r\n  //constructor for consistency\r\n  //eslint-disable-next-line\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n  //toString if needed\r\n  toString() {\r\n    return \"king\";\r\n  }\r\n  //scans through board and gets valide moves\r\n  validMoves() {\r\n    let [row, col] = this.props.coords,\r\n        moves = [],\r\n        board = this.props.getBoard(),\r\n        team = this.props.team;\r\n    //iterates through at most the 3 rows around the king\r\n    for(let x = row - 1; x < 8 && x < row + 2; x++) {\r\n      //iterates through at most the 3 columns around the king\r\n      for(let y = col - 1; y < 8 && y < col + 2; y++) {\r\n        //if the position is not in the king\r\n        if((x !== row || y !== col) && x > -1 && y > -1 && (board[x][y] === null || board[x][y].team !== team)){\r\n          moves.push({x: x, y: y});\r\n        }\r\n      }\r\n    }\r\n    if(this.props.castleable) {\r\n      if(board[row][0].name === \"castle\") {\r\n        let bool = true;\r\n        for(let i = 1; i < col && bool; i++) {\r\n          bool = (board[row][i] === null)\r\n        }\r\n        if(bool) {\r\n          moves.push({x: row, y: 1, castle: true});\r\n        }\r\n      }\r\n      if(board[row][7].name === \"castle\") {\r\n        let bool = true;\r\n        for(let i = 6; i > col && bool; i--) {\r\n          bool = (board[row][i] === null);\r\n        }\r\n        if(bool) {\r\n          moves.push({x: row, y: 6, castle: true})\r\n        }\r\n      }\r\n    }\r\n    console.log(moves)\r\n    return moves;\r\n  }\r\n  //puts necessary values into the transfer\r\n  onDrag(e) {\r\n    e.dataTransfer.setData(\"piece\", this)\r\n    e.dataTransfer.setData(\"initcoords\", this.props.coords)\r\n    let moves = this.validMoves()\r\n    this.props.highlightSpaces(moves);\r\n  }\r\n\r\n  render() {\r\n    if(this.props.team === \"white\") {\r\n      return (\r\n        <img\r\n          src={white}\r\n          alt=\"white king\"\r\n          draggable={this.props.team === this.props.curTurn}\r\n          onDragStart={(e)=>{\r\n            this.onDrag(e)\r\n          }}\r\n          className=\"piece\"\r\n          onClick={e => {\r\n            this.props.setClickTransfer(this.props.coords, this)\r\n            this.props.highlightSpaces(this.validMoves())\r\n          }}\r\n        />\r\n      )\r\n    }\r\n    else {\r\n      return (\r\n        <img\r\n          src={black}\r\n          alt=\"black king\"\r\n          draggable={this.props.team === this.props.curTurn}\r\n          onDragStart={(e)=>{\r\n            this.onDrag(e)\r\n          }}\r\n          className=\"piece\"\r\n          onClick={e => {\r\n            this.props.setClickTransfer(this.props.coords, this)\r\n            this.props.highlightSpaces(this.validMoves())\r\n          }}\r\n        />\r\n      )\r\n    }\r\n  }\r\n\r\n}\r\n","import React, { Component } from 'react';\r\n//getes image\r\nimport black from './Images/knight_black.svg';\r\nimport white from './Images/knight_white.svg';\r\n\r\nexport default class Knight extends Component {\r\n  //constructor for consistency\r\n  //eslint-disable-next-line\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n  //toString if needed\r\n  toString() {\r\n    return \"knight\";\r\n  }\r\n  //gets list of moves\r\n  validMoves() {\r\n    let [row, col] = this.props.coords,\r\n        moves = [],\r\n        board = this.props.getBoard(),\r\n        team = this.props.team;\r\n    //potential moves moving down board\r\n    let x = row + 2,\r\n        y = col + 1;\r\n    if(x < 8 && y < 8 && (board[x][y] === null || board[x][y].team !== team)) {\r\n      moves.push({x: x, y: y});\r\n    }\r\n    y = col - 1;\r\n    if(x < 8 && y > -1 && (board[x][y] === null || board[x][y].team !== team)) {\r\n      moves.push({x: x, y: y});\r\n    }\r\n    //potential moves moving up board\r\n    x = row - 2;\r\n    y = col + 1;\r\n    if(x > -1 && y < 8 && (board[x][y] === null || board[x][y].team !== team)) {\r\n      moves.push({x: x, y: y});\r\n    }\r\n    y = col - 1;\r\n    if(x > -1 && y > -1 && (board[x][y] === null || board[x][y].team !== team)) {\r\n      moves.push({x: x, y: y});\r\n    }\r\n    //potential moves moving right\r\n    x = row + 1;\r\n    y = col + 2;\r\n    if(x < 8 && y < 8 && (board[x][y] === null || board[x][y].team !== team)) {\r\n      moves.push({x: x, y: y});\r\n    }\r\n    x = row - 1;\r\n    if(x > -1 && y < 8 && (board[x][y] === null || board[x][y].team !== team)) {\r\n      moves.push({x: x, y: y});\r\n    }\r\n    //potential moves moving left\r\n    x = row + 1;\r\n    y = col - 2;\r\n    if(x < 8 && y > -1 && (board[x][y] === null || board[x][y].team !== team)) {\r\n      moves.push({x: x, y: y});\r\n    }\r\n    x = row - 1\r\n    if(x > -1 && y > -1 && (board[x][y] === null || board[x][y].team !== team)) {\r\n      moves.push({x: x, y: y});\r\n    }\r\n    console.log(moves);\r\n    return moves;\r\n  }\r\n  //puts necessary value into datatransfer\r\n  onDrag(e) {\r\n    e.dataTransfer.setData(\"piece\", this)\r\n    e.dataTransfer.setData(\"initcoords\", this.props.coords)\r\n    let moves = this.validMoves()\r\n    this.props.highlightSpaces(moves);\r\n  }\r\n  render() {\r\n    if(this.props.team === \"white\") {\r\n      return (\r\n        <img\r\n          src={white}\r\n          alt=\"white knight\"\r\n          draggable={this.props.team === this.props.curTurn}\r\n          onDragStart={(e)=>{\r\n            this.onDrag(e)\r\n          }}\r\n          className=\"piece\"\r\n          onClick={e => {\r\n            this.props.setClickTransfer(this.props.coords, this)\r\n            this.props.highlightSpaces(this.validMoves())\r\n          }}\r\n        />\r\n      )\r\n    }\r\n    else {\r\n      return (\r\n        <img\r\n          src={black}\r\n          alt=\"black knight\"\r\n          draggable={this.props.team === this.props.curTurn}\r\n          onDragStart={(e)=>{\r\n            this.onDrag(e)\r\n          }}\r\n          className=\"piece\"\r\n          onClick={e => {\r\n            this.props.setClickTransfer(this.props.coords, this)\r\n            this.props.highlightSpaces(this.validMoves())\r\n          }}\r\n        />\r\n      )\r\n    }\r\n  }\r\n\r\n}\r\n","import React, { Component } from 'react';\r\n//inmports images for piece\r\nimport black from './Images/queen_black.svg';\r\nimport white from './Images/queen_white.svg';\r\n\r\nimport './piece.css';\r\n\r\nexport default class Queen extends Component {\r\n  //constructor for conssitency\r\n  //eslint-disable-next-line\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n  //toString if needed\r\n  toString() {\r\n    return \"queen\";\r\n  }\r\n  validMoves() {\r\n    let [row, col] = this.props.coords,\r\n        moves = [],\r\n        board = this.props.getBoard(),\r\n        team = this.props.team;\r\n    //runs up board\r\n    for(let x = row + 1; x < 8; x++) {\r\n      if(board[x][col] === null || board[x][col].team !== team) {\r\n        moves.push({x: x, y: col});\r\n        if(board[x][col] !== null) {\r\n          break;\r\n        }\r\n      }\r\n      else {\r\n        break;\r\n      }\r\n    }\r\n    //runs down board\r\n    for(let x = row - 1; x > -1; x--) {\r\n      if(board[x][col] === null || board[x][col].team !== team) {\r\n        moves.push({x: x, y: col});\r\n        if(board[x][col] !== null) {\r\n          break;\r\n        }\r\n      }\r\n      else {\r\n        break;\r\n      }\r\n    }\r\n    //runs right on board\r\n    for(let y = col + 1; y < 8; y++) {\r\n      if(board[row][y] === null || board[row][y].team !== team) {\r\n        moves.push({x: row, y: y});\r\n        if(board[row][y] !== null) {\r\n          break;\r\n        }\r\n      }\r\n      else {\r\n        break;\r\n      }\r\n    }\r\n    //runs left on board\r\n    for(let y = col - 1; y > -1; y--) {\r\n      if(board[row][y] === null || board[row][y].team !== team) {\r\n        moves.push({x: row, y: y});\r\n        if(board[row][y] !== null) {\r\n          break;\r\n        }\r\n      }\r\n      else {\r\n        break;\r\n      }\r\n    }\r\n    //runs down to right\r\n    for(let x = row + 1, y = col + 1; x < 8 && y < 8; x++, y++) {\r\n      //if space is empty or enemy then adds to array\r\n      if(board[x][y] === null || board[x][y].team !== team) {\r\n        moves.push({x: x, y: y});\r\n        //if it reaches an enemy then it breaks the loop and continues\r\n        if(board[x][y] !== null) {\r\n          break;\r\n        }\r\n      }\r\n      //\r\n      else {\r\n        break;\r\n      }\r\n    }\r\n    //runs down to the left with same logic\r\n    for(let x = row + 1, y = col - 1; x < 8 && y > -1; x++, y--) {\r\n      if(board[x][y] === null || board[x][y].team !== team) {\r\n        moves.push({x: x, y: y});\r\n        if(board[x][y] !== null) {\r\n          break;\r\n        }\r\n      }\r\n      else {\r\n        break;\r\n      }\r\n    }\r\n    //runs up to the left with same logic\r\n    for(let x = row - 1, y = col - 1; x > -1 && y > -1; x--, y--) {\r\n      if(board[x][y] === null || board[x][y].team !== team) {\r\n        moves.push({x: x, y: y});\r\n        if(board[x][y] !== null) {\r\n          break;\r\n        }\r\n      }\r\n      else {\r\n        break;\r\n      }\r\n    }\r\n    //runs up to the right with same logice\r\n    for(let x = row - 1, y = col + 1; x > -1 && y < 8; x--, y++) {\r\n      if(board[x][y] === null || board[x][y].team !== team) {\r\n        moves.push({x: x, y: y});\r\n        if(board[x][y] !== null) {\r\n          break;\r\n        }\r\n      }\r\n      else {\r\n        break;\r\n      }\r\n    }\r\n    console.log(moves);\r\n    return moves;\r\n  }\r\n\r\n  onDrag(e) {\r\n    e.dataTransfer.setData(\"piece\", this)\r\n    e.dataTransfer.setData(\"initcoords\", this.props.coords)\r\n    let moves = this.validMoves()\r\n    this.props.highlightSpaces(moves);\r\n  }\r\n\r\n  render() {\r\n    if(this.props.team === \"white\") {\r\n      return (\r\n        <img\r\n          src={white}\r\n          alt=\"white queen\"\r\n          draggable={this.props.team === this.props.curTurn}\r\n          onDragStart={(e)=>{\r\n            this.onDrag(e)\r\n          }}\r\n          className=\"piece\"\r\n          onClick={e => {\r\n            this.props.setClickTransfer(this.props.coords, this)\r\n            this.props.highlightSpaces(this.validMoves())\r\n          }}\r\n        />\r\n      )\r\n    }\r\n    else {\r\n      return (\r\n        <img\r\n          src={black}\r\n          alt=\"black queen\"\r\n          draggable={this.props.team === this.props.curTurn}\r\n          onDragStart={(e)=>{\r\n            this.onDrag(e)\r\n          }}\r\n          className=\"piece\"\r\n          onClick={e => {\r\n            this.props.setClickTransfer(this.props.coords, this)\r\n            this.props.highlightSpaces(this.validMoves())\r\n          }}\r\n        />\r\n      )\r\n    }\r\n  }\r\n\r\n}\r\n","//imports of basics\r\nimport React, { Component } from 'react';\r\nimport './Board.css';\r\n//imports of all pieces\r\nimport Pawn   from'./pieces/Pawn.js';\r\nimport Bishop from './pieces/Bishop.js';\r\nimport Castle from './pieces/Castle.js';\r\nimport King   from './pieces/King.js';\r\nimport Knight from './pieces/Knight.js';\r\nimport Queen  from './pieces/Queen.js';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //initializes the board in state\r\n    this.state = {\r\n      board: [\r\n         //white special pieces\r\n        [\r\n          {name: \"castle\", team: \"white\", coords: {x: 0, y: 0}},\r\n          {name: \"knight\", team: \"white\", coords: {x: 0, y: 1}},\r\n          {name: \"bishop\", team: \"white\", coords: {x: 0, y: 2}},\r\n          {name: \"king\",   team: \"white\", coords: {x: 0, y: 3}, castleable: true},\r\n          {name: \"queen\",  team: \"white\", coords: {x: 0, y: 4}},\r\n          {name: \"bishop\", team: \"white\", coords: {x: 0, y: 5}},\r\n          {name: \"knight\", team: \"white\", coords: {x: 0, y: 6}},\r\n          {name: \"castle\", team: \"white\", coords: {x: 0, y: 7}},\r\n        ],\r\n        //white pawns\r\n        [\r\n          {name: \"pawn\",   team: \"white\", coords: {x: 1, y: 0}, firstTurn: true},\r\n          {name: \"pawn\",   team: \"white\", coords: {x: 1, y: 1}, firstTurn: true},\r\n          {name: \"pawn\",   team: \"white\", coords: {x: 1, y: 2}, firstTurn: true},\r\n          {name: \"pawn\",   team: \"white\", coords: {x: 1, y: 3}, firstTurn: true},\r\n          {name: \"pawn\",   team: \"white\", coords: {x: 1, y: 4}, firstTurn: true},\r\n          {name: \"pawn\",   team: \"white\", coords: {x: 1, y: 5}, firstTurn: true},\r\n          {name: \"pawn\",   team: \"white\", coords: {x: 1, y: 6}, firstTurn: true},\r\n          {name: \"pawn\",   team: \"white\", coords: {x: 1, y: 7}, firstTurn: true},\r\n        ],\r\n        //mid spaces\r\n        [null, null, null, null, null, null, null, null],\r\n        [null, null, null, null, null, null, null, null],\r\n        [null, null, null, null, null, null, null, null],\r\n        [null, null, null, null, null, null, null, null],\r\n        //black pawns\r\n        [\r\n          {name: \"pawn\",   team: \"black\", coords: {x: 6, y: 0}, firstTurn: true},\r\n          {name: \"pawn\",   team: \"black\", coords: {x: 6, y: 1}, firstTurn: true},\r\n          {name: \"pawn\",   team: \"black\", coords: {x: 6, y: 2}, firstTurn: true},\r\n          {name: \"pawn\",   team: \"black\", coords: {x: 6, y: 3}, firstTurn: true},\r\n          {name: \"pawn\",   team: \"black\", coords: {x: 6, y: 4}, firstTurn: true},\r\n          {name: \"pawn\",   team: \"black\", coords: {x: 6, y: 5}, firstTurn: true},\r\n          {name: \"pawn\",   team: \"black\", coords: {x: 6, y: 6}, firstTurn: true},\r\n          {name: \"pawn\",   team: \"black\", coords: {x: 6, y: 7}, firstTurn: true},\r\n        ],\r\n        //black special pieces\r\n        [\r\n          {name: \"castle\", team: \"black\", coords: {x: 7, y: 0}},\r\n          {name: \"knight\", team: \"black\", coords: {x: 7, y: 1}},\r\n          {name: \"bishop\", team: \"black\", coords: {x: 7, y: 2}},\r\n          {name: \"queen\",  team: \"black\", coords: {x: 7, y: 3}},\r\n          {name: \"king\",   team: \"black\", coords: {x: 7, y: 4}, castleable: true},\r\n          {name: \"bishop\", team: \"black\", coords: {x: 7, y: 5}},\r\n          {name: \"knight\", team: \"black\", coords: {x: 7, y: 6}},\r\n          {name: \"castle\", team: \"black\", coords: {x: 7, y: 7}}],\r\n      ],\r\n      //keeps track of turn and if there is a winner\r\n      turn: \"white\",\r\n      winner: null,\r\n      //keeps track of if a piece is moving and what spaces it can move to\r\n      moving: false,\r\n      isMove: [\r\n        [false, false, false, false, false, false, false, false],\r\n        [false, false, false, false, false, false, false, false],\r\n        [false, false, false, false, false, false, false, false],\r\n        [false, false, false, false, false, false, false, false],\r\n        [false, false, false, false, false, false, false, false],\r\n        [false, false, false, false, false, false, false, false],\r\n        [false, false, false, false, false, false, false, false],\r\n        [false, false, false, false, false, false, false, false],\r\n      ],\r\n      clickTransfer: {\r\n        piece: null,\r\n        initcoords: null\r\n      }\r\n    }\r\n  }\r\n  //returns the board\r\n  getBoard = () => {\r\n    return this.state.board;\r\n  }\r\n  //executes the move\r\n  movePiece(row, col, e) {\r\n    console.log(\"moving piece\")\r\n    //gets list of moves and the move from list\r\n    let move = this.state.isMove[row][col]\r\n    //if it is not valid move rejects and moves on\r\n    if(!move) {\r\n      //resets the state for use on next move\r\n      this.setState(\r\n        {\r\n          moving: false,\r\n          isMove: [\r\n            [false, false, false, false, false, false, false, false],\r\n            [false, false, false, false, false, false, false, false],\r\n            [false, false, false, false, false, false, false, false],\r\n            [false, false, false, false, false, false, false, false],\r\n            [false, false, false, false, false, false, false, false],\r\n            [false, false, false, false, false, false, false, false],\r\n            [false, false, false, false, false, false, false, false],\r\n            [false, false, false, false, false, false, false, false],\r\n          ],\r\n          clickTransfer: {\r\n            piece: null,\r\n            initcoords: null\r\n          }\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    //gets the board, the piece and the initial point of the piece\r\n    let initx, inity;\r\n    e ?\r\n        [initx, , inity]  = e.dataTransfer.getData(\"initcoords\") :\r\n        [initx, inity]     = this.state.clickTransfer.coords;\r\n    let board = this.state.board,\r\n        piece = board[initx][inity];\r\n\r\n    if(board[row][col] && board[row][col].name === \"king\") {\r\n      this.setState({winner: piece.team})\r\n    }\r\n    //sets the pieces pints to the new\r\n    piece.coords = {\r\n      x: row,\r\n      y: col\r\n    }\r\n    //special logic for pawn first turn\r\n    if(piece.name === \"pawn\" && piece.firstTurn) {\r\n      piece.firstTurn = false;\r\n    }\r\n    //special logic for castline a king\r\n    if(piece.name === \"king\" && piece.castleable) {\r\n      //ensures castle cannot happen twice\r\n      piece.castleable = false;\r\n      //ensures move is castle move\r\n      if(move.castle) {\r\n        //conditions specific to right castle\r\n        if(col === 6) {\r\n          //swaps knight to new spot and gives proper coords\r\n          board[row][5] = board[row][7];\r\n          board[row][7] = null;\r\n          board[row][5].coords = {\r\n            x: row,\r\n            y: 5\r\n          }\r\n        }\r\n        //conditions specific to left castle\r\n        else if(col === 1) {\r\n          //swaps knight to new spot and gives proper coords\r\n          board[row][2] = board[row][0];\r\n          board[row][0] = null;\r\n          board[row][2].coords = {\r\n            x: row,\r\n            y: 2\r\n          }\r\n        }\r\n      }\r\n    }\r\n    //transfers the piece to new square\r\n    board[initx][inity] = null;\r\n    board[row][col] = piece;\r\n    let nextTurn = (this.state.turn === \"white\") ? \"black\" : \"white\";\r\n    //resets and rerenders board\r\n    this.setState(\r\n      {\r\n        board: board,\r\n        turn: nextTurn,\r\n        moving: false,\r\n        isMove: [\r\n          [false, false, false, false, false, false, false, false],\r\n          [false, false, false, false, false, false, false, false],\r\n          [false, false, false, false, false, false, false, false],\r\n          [false, false, false, false, false, false, false, false],\r\n          [false, false, false, false, false, false, false, false],\r\n          [false, false, false, false, false, false, false, false],\r\n          [false, false, false, false, false, false, false, false],\r\n          [false, false, false, false, false, false, false, false],\r\n        ],\r\n        clickTransfer: {\r\n          piece: null,\r\n          coords: null\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  setClickTransfer = (coords, piece) => {\r\n    this.setState({clickTransfer: {\r\n      coords: coords,\r\n      piece: piece\r\n    }})\r\n    console.log(this.state.clickTransfer);\r\n  }\r\n  //gets the piece based on the name\r\n  getPiece(piece) {\r\n    //skips if null\r\n    if(piece !== null) {\r\n      switch(piece.name){\r\n        //goes through and finds which piece to render\r\n        case \"pawn\":\r\n          return <Pawn\r\n            team={piece.team}\r\n            firstTurn={piece.firstTurn}\r\n            curTurn={this.state.turn}\r\n            coords={[piece.coords.x, piece.coords.y]}\r\n            getBoard={this.getBoard}\r\n            highlightSpaces={this.highlightSpaces}\r\n            setClickTransfer={this.setClickTransfer}\r\n          />\r\n        case \"king\":\r\n          return <King\r\n            team={piece.team}\r\n            castleable={piece.castleable}\r\n            curTurn={this.state.turn}\r\n            coords={[piece.coords.x, piece.coords.y]}\r\n            getBoard={this.getBoard}\r\n            highlightSpaces={this.highlightSpaces}\r\n            setClickTransfer={this.setClickTransfer}\r\n          />\r\n        case \"queen\":\r\n          return <Queen\r\n            team={piece.team}\r\n            curTurn={this.state.turn}\r\n            coords={[piece.coords.x, piece.coords.y]}\r\n            getBoard={this.getBoard}\r\n            highlightSpaces={this.highlightSpaces}\r\n            setClickTransfer={this.setClickTransfer}\r\n          />\r\n        case \"castle\":\r\n          return <Castle\r\n            team={piece.team}\r\n            curTurn={this.state.turn}\r\n            coords={[piece.coords.x, piece.coords.y]}\r\n            getBoard={this.getBoard}\r\n            highlightSpaces={this.highlightSpaces}\r\n            setClickTransfer={this.setClickTransfer}\r\n          />\r\n        case \"knight\":\r\n          return <Knight\r\n            team={piece.team}\r\n            curTurn={this.state.turn}\r\n            coords={[piece.coords.x, piece.coords.y]}\r\n            getBoard={this.getBoard}\r\n            highlightSpaces={this.highlightSpaces}\r\n            setClickTransfer={this.setClickTransfer}\r\n          />\r\n        case \"bishop\":\r\n          return <Bishop\r\n            team={piece.team}\r\n            curTurn={this.state.turn}\r\n            coords={[piece.coords.x, piece.coords.y]}\r\n            getBoard={this.getBoard}\r\n            highlightSpaces={this.highlightSpaces}\r\n            setClickTransfer={this.setClickTransfer}\r\n          />\r\n        default:\r\n          return\r\n    }}\r\n  }\r\n  //traverses the board array and renders the rows and columns\r\n  renderBoard() {\r\n    //travers the rows and uses rowNum as the key\r\n    return this.state.board.map((rowArr, rowNum) => {\r\n      return <tr className=\"gameRows\" key={rowNum}>\r\n        {rowArr.map((piece, colNum) => {\r\n          return <td\r\n            className={\r\n              this.state.isMove[rowNum][colNum] ? \"gameCell moveSpace\" : \"gameCell\"\r\n            }\r\n            key={colNum}\r\n            onDragOver={(e)=>{\r\n              e.preventDefault();\r\n              e.dataTransfer.setData(\"newCoords\", [rowNum, colNum])\r\n            }}\r\n            onDrop={(e)=>{\r\n              this.movePiece(rowNum, colNum, e)}\r\n            }\r\n            onClick={() => {\r\n              if(this.state.clickTransfer.piece !== null) {\r\n                this.movePiece(rowNum, colNum, null);\r\n              }\r\n            }}\r\n          >\r\n            {this.getPiece(piece)}\r\n          </td>\r\n        })}\r\n      </tr>\r\n    });\r\n  }\r\n  //render this winner announcment\r\n  getWinElement() {\r\n    return (this.state.winner) ? <h1>{this.state.winner}</h1> : <div></div>\r\n  }\r\n  //highlights the spaces available for move\r\n  highlightSpaces = (spaces)=> {\r\n    console.log(\"highlightingSpaces\");\r\n    //if the move spaces have already been calculated stops the funcion\r\n    if(this.state.moving) {\r\n      return;\r\n    }\r\n    //initializes the isMove array\r\n    let isMoveArray = [\r\n          [false, false, false, false, false, false, false, false],\r\n          [false, false, false, false, false, false, false, false],\r\n          [false, false, false, false, false, false, false, false],\r\n          [false, false, false, false, false, false, false, false],\r\n          [false, false, false, false, false, false, false, false],\r\n          [false, false, false, false, false, false, false, false],\r\n          [false, false, false, false, false, false, false, false],\r\n          [false, false, false, false, false, false, false, false]\r\n        ];\r\n    //runs through each possible movoe and sets that space to true in isMove\r\n    spaces.forEach((element) => {\r\n      isMoveArray[element.x][element.y] = true\r\n    })\r\n    //sets the state to trigger a rerender with move points\r\n    this.setState(\r\n      {\r\n        moving: true,\r\n        isMove: isMoveArray\r\n      }\r\n    );\r\n  }\r\n  render() {\r\n    //renders the board in a table\r\n    return (\r\n      <div>\r\n        {this.getWinElement()}\r\n        <table\r\n          className=\"table\"\r\n        >\r\n          <tbody>\r\n            {this.renderBoard()}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}